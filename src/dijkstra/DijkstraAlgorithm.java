package dijkstra;

import java.util.Arrays;

public class DijkstraAlgorithm {

	public static void main(String[] args) {
		// 迪杰斯特拉算法（最短路径算法，广度优先）
		
		//顶点
		char[] vertex = {'A','B','C','D','E','F','G'};
		
		//邻接矩阵
		int[][] matrix = new int[vertex.length][vertex.length];
		final int N = 65535;//较大的路程，表示不通路
		matrix[0] = new int[] {N, 5, 7, N, N, N, 2};
		matrix[1] = new int[] {5, N, N, 9, N, N, 3};
		matrix[2] = new int[] {7, N, N, N, 8, N, N};
		matrix[3] = new int[] {N, 9, N, N, N, 4, N};
		matrix[4] = new int[] {N, N, 8, N, N, 5, 4};
		matrix[5] = new int[] {N, N, N, 4, 5, N, 6};
		matrix[6] = new int[] {2, 3, N, N, 4, 6, N};
		
		//创建图Graph对象
		Graph graph = new Graph(vertex, matrix);
		
		//输出图的零阶矩阵
		graph.showGraph();
		
		//测试迪杰斯特拉算法
		graph.dsj(6);
		
		graph.showDijkstra();
		
	}

}




//图类
class Graph{
	private char[] vertex;//顶点数组
	private int[][] matrix;//邻接矩阵
	private VisitedVertex vv;//已经访问的顶点的集合
	
	//构造器
	public Graph(char[] vertex, int[][] matrix) {
		this.vertex = vertex;
		this.matrix = matrix;
	}
	
	//显示结果
	public void showDijkstra() {
		vv.show();
	}
	
	//显示图
	public void showGraph() {
		for(int[] link: matrix) {
			System.out.println(Arrays.toString(link));
		}
	}
	
	//迪杰斯特拉算法
	/**
	 * 迪杰斯特拉算法
	 * @param index		出发顶点的下标
	 */
	public void dsj(int index) {
		vv = new VisitedVertex(vertex.length, index);
		update(index);//更新index顶点到周围顶点的距离和前驱顶点
		
		for(int j = 1; j < vertex.length; j++) {
			index = vv.updateArr();//选择距离最近的下一个新的访问顶点
			update(index);//更新index顶点到周围顶点的距离和前驱顶点
		}
	}
	
	
	
	//更新index下标顶点到周围顶点的距离和周围顶点的前驱顶点
	public void update(int index) {
		int len = 0;
		//根据遍历我们的邻接矩阵的matrix[index]行
		for(int j = 0; j < matrix[index].length; j++) {
			//len是出发顶点到index顶点的距离+从index顶点到j顶点的距离之和
			len = vv.getDis(index) + matrix[index][j];
			//如果j顶点没有被访问过，并且len小于出发顶点到j顶点的距离，满足则更新
			if(!vv.in(j) && len < vv.getDis(j)) {
				vv.updatePre(j, index);//更新j顶点的前驱为index顶点
				vv.updateDis(j, len);//更新出发顶点到j顶点的距离
			}
		}
	}
	
	
}



//创建一个VisitedVertex类，表示已经访问过的顶点的集合
class VisitedVertex{
	//记录各个顶点是否访问过，1是已访问，0是未访问，会进行动态更新
	public int[] already_arr;
	//每个下标对应的值为前一个顶点的下标，会进行动态更新
	public int[] pre_visited;
	//记录出发顶点到其他所有顶点之间的距离，会进行动态更新
	public int[] dis;
	
	//构造器
	/**
	 * 构造器
	 * @param length	顶点的个数
	 * @param index		出发顶点的下标
	 */
	public VisitedVertex(int length, int index) {
		this.already_arr = new int[length];
		this.pre_visited = new int[length];
		this.dis = new int[length];
		
		//初始化
		Arrays.fill(dis, 65535);//把数组dis的元素值全部设置为65535
		this.already_arr[index] = 1;//设置出发顶点被访问过
		this.dis[index] = 0;//把出发顶点到出发地点的距离修改为0
	}
	
	/**
	 * 判断index顶点是否被访问过
	 * @param index	需要判断是否被访问过的顶点下标
	 * @return	如果访问过返回true，如果没有则返回false
	 */
	public boolean in(int index) {
		return already_arr[index] == 1;
	}
	
	/**
	 * 更新出发顶点到index顶点的距离为len
	 * @param index	顶点
	 * @param len	距离
	 */
	public void updateDis(int index, int len) {
		dis[index] = len;
	}
	
	/**
	 * 更新pre顶点的前驱为index顶点
	 * @param pre
	 * @param index
	 */
	public void updatePre(int pre, int index) {
		pre_visited[pre] = index;
	}
	
	/**
	 * 返回出发顶点到index顶点的距离
	 * @param index
	 */
	public int getDis(int index) {
		return dis[index];
	}
	
	//继续选择并返回新的访问顶点，比如遍历G点后，发现到A距离最短，则返回A的下标
	public int updateArr() {
		int min = 65535, index = 0;
		for(int i = 0; i < already_arr.length; i++) {
			if(already_arr[i] == 0 && dis[i] < min) {
				min = dis[i];
				index = i;
			}
		}
		//更新index顶点被访问过
		already_arr[index] = 1;
		return index;
	}
	
	//显示最后的结果，即将三个数组的情况输出
	public void show() {
		System.out.println("==============================");
		//输出already_arr
		for(int i : already_arr) {
			System.out.print(i + " ");
		}
		System.out.println();
		//输出pre_visited
		for(int i : pre_visited) {
			System.out.print(i + " ");
		}
		System.out.println();
		//输出dis
		for(int i: dis) {
			System.out.print(i + " ");
		}
		System.out.println();
	}
	
}




